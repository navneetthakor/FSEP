// Generated by WebPulse Request Flow Generator
// 2025-03-18T09:23:35.093Z

async function myCustomFlow(initialData = {}) {
  // Initialize data store
  const dataStore = { ...initialData };
  let currentStep = null;

  // Utility function to reference data from previous steps
  const getDataRef = (path) => {
    return extractDataByPath(dataStore, path);
  };

  // undefined (request1)
  currentStep = 'request1';
  try {
    console.log('Executing HTTP request: undefined');
    const response_request1 = await fetch(
      "https://google.com/",
      {
        method: "GET",
        headers: [],
      }
    );

    const processedResponse = await handleResponse(response_request1);
    dataStore.request1 = processedResponse;
  } catch (error) {
    dataStore.request1_error = error;
    console.error('Error in undefined:', error);
  }

  // undefined (request2)
  currentStep = 'request2';
  try {
    console.log('Executing HTTP request: undefined');
    const response_request2 = await fetch(
      "https://api.github.com/user/navneetthakor",
      {
        method: "GET",
        headers: [],
      }
    );

    const processedResponse = await handleResponse(response_request2);
    dataStore.request2 = processedResponse;
  } catch (error) {
    dataStore.request2_error = error;
    console.error('Error in undefined:', error);
  }

  // Define the flow logic
  const flowLogic = {
    'request1': {
      'response': 'request2',
    },
  };

  // Execute flow based on conditions
  let nextNode = Object.keys(flowLogic)[0]; // Start with first node
  const maxSteps = 100; // Prevent infinite loops
  let steps = 0;

  while (nextNode && steps < maxSteps) {
    steps++;
    const node = flowLogic[nextNode];
    if (!node) break;

    // Determine next step based on condition results
    if (dataStore[nextNode + '_result'] !== undefined) {
      // Handle condition nodes
      const result = dataStore[nextNode + '_result'] ? 'true' : 'false';
      nextNode = node[result];
    } else {
      // Handle other node types
      nextNode = node['response'] || node['output'] || null;
    }
  }

  // Return the final data store
  return dataStore;
}

/**
 * Extract data from an object using a dot or bracket notation path
 * @param {Object} obj - The object to extract data from
 * @param {string} path - Path using dot or bracket notation (e.g., "user.profile.name" or "responses[0].body.id")
 * @returns {any} The extracted value or undefined if not found
 */
function extractDataByPath(obj, path) {
  if (!obj || !path) return undefined;

  // Handle special template syntax for data references
  if (path.startsWith('${') && path.endsWith('}')) {
    path = path.slice(2, -1).trim();
  }

  // Split the path by dots or bracket notation
  const keys = path.match(/\[([^\[\]]*?)\]|([^\[\]\.]+)/g) || [];
  let current = obj;

  for (let key of keys) {
    // Remove brackets if present
    key = key.replace(/^\[([^\]]+)\]$/, '$1').replace(/^\["([^"]+)"\]$/, '$1').replace(/^\['([^']+)'\]$/, '$1');
    // Remove leading dots if present
    key = key.replace(/^\./g, '');

    if (current === null || current === undefined) {
      return undefined;
    }

    current = current[key];
  }

  return current;
}

// Example usage:
// myCustomFlow().then(result => console.log(result));
